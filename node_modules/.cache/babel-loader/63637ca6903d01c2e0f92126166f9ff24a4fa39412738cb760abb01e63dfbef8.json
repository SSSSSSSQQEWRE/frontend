{"ast":null,"code":"// Mock database service for testing without Firebase\nclass MockDb {\n  constructor() {\n    this.data = {\n      users: new Map(),\n      games: new Map(),\n      questions: new Map()\n    };\n  }\n\n  // Mock collection reference\n  collection(name) {\n    return {\n      doc: id => ({\n        get: () => Promise.resolve({\n          exists: this.data[name].has(id),\n          data: () => this.data[name].get(id)\n        }),\n        set: data => {\n          this.data[name].set(id, data);\n          return Promise.resolve();\n        },\n        update: data => {\n          const existing = this.data[name].get(id) || {};\n          this.data[name].set(id, {\n            ...existing,\n            ...data\n          });\n          return Promise.resolve();\n        },\n        delete: () => {\n          this.data[name].delete(id);\n          return Promise.resolve();\n        }\n      }),\n      add: data => {\n        const id = 'doc-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n        this.data[name].set(id, data);\n        return Promise.resolve({\n          id\n        });\n      },\n      get: () => Promise.resolve({\n        docs: Array.from(this.data[name].entries()).map(([id, data]) => ({\n          id,\n          data: () => data\n        }))\n      })\n    };\n  }\n}\n\n// Create singleton instance\nconst mockDb = new MockDb();\nexport default mockDb;","map":{"version":3,"names":["MockDb","constructor","data","users","Map","games","questions","collection","name","doc","id","get","Promise","resolve","exists","has","set","update","existing","delete","add","Date","now","Math","random","toString","substr","docs","Array","from","entries","map","mockDb"],"sources":["/home/ervin-caravali-ibarra/Downloads/frontend-v2/src/services/mockDb.js"],"sourcesContent":["// Mock database service for testing without Firebase\nclass MockDb {\n  constructor() {\n    this.data = {\n      users: new Map(),\n      games: new Map(),\n      questions: new Map()\n    };\n  }\n\n  // Mock collection reference\n  collection(name) {\n    return {\n      doc: (id) => ({\n        get: () => Promise.resolve({\n          exists: this.data[name].has(id),\n          data: () => this.data[name].get(id)\n        }),\n        set: (data) => {\n          this.data[name].set(id, data);\n          return Promise.resolve();\n        },\n        update: (data) => {\n          const existing = this.data[name].get(id) || {};\n          this.data[name].set(id, { ...existing, ...data });\n          return Promise.resolve();\n        },\n        delete: () => {\n          this.data[name].delete(id);\n          return Promise.resolve();\n        }\n      }),\n      add: (data) => {\n        const id = 'doc-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n        this.data[name].set(id, data);\n        return Promise.resolve({ id });\n      },\n      get: () => Promise.resolve({\n        docs: Array.from(this.data[name].entries()).map(([id, data]) => ({\n          id,\n          data: () => data\n        }))\n      })\n    };\n  }\n}\n\n// Create singleton instance\nconst mockDb = new MockDb();\n\nexport default mockDb;\n\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,CAAC;EACXC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,IAAI,GAAG;MACVC,KAAK,EAAE,IAAIC,GAAG,CAAC,CAAC;MAChBC,KAAK,EAAE,IAAID,GAAG,CAAC,CAAC;MAChBE,SAAS,EAAE,IAAIF,GAAG,CAAC;IACrB,CAAC;EACH;;EAEA;EACAG,UAAUA,CAACC,IAAI,EAAE;IACf,OAAO;MACLC,GAAG,EAAGC,EAAE,KAAM;QACZC,GAAG,EAAEA,CAAA,KAAMC,OAAO,CAACC,OAAO,CAAC;UACzBC,MAAM,EAAE,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAC,CAACO,GAAG,CAACL,EAAE,CAAC;UAC/BR,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACA,IAAI,CAACM,IAAI,CAAC,CAACG,GAAG,CAACD,EAAE;QACpC,CAAC,CAAC;QACFM,GAAG,EAAGd,IAAI,IAAK;UACb,IAAI,CAACA,IAAI,CAACM,IAAI,CAAC,CAACQ,GAAG,CAACN,EAAE,EAAER,IAAI,CAAC;UAC7B,OAAOU,OAAO,CAACC,OAAO,CAAC,CAAC;QAC1B,CAAC;QACDI,MAAM,EAAGf,IAAI,IAAK;UAChB,MAAMgB,QAAQ,GAAG,IAAI,CAAChB,IAAI,CAACM,IAAI,CAAC,CAACG,GAAG,CAACD,EAAE,CAAC,IAAI,CAAC,CAAC;UAC9C,IAAI,CAACR,IAAI,CAACM,IAAI,CAAC,CAACQ,GAAG,CAACN,EAAE,EAAE;YAAE,GAAGQ,QAAQ;YAAE,GAAGhB;UAAK,CAAC,CAAC;UACjD,OAAOU,OAAO,CAACC,OAAO,CAAC,CAAC;QAC1B,CAAC;QACDM,MAAM,EAAEA,CAAA,KAAM;UACZ,IAAI,CAACjB,IAAI,CAACM,IAAI,CAAC,CAACW,MAAM,CAACT,EAAE,CAAC;UAC1B,OAAOE,OAAO,CAACC,OAAO,CAAC,CAAC;QAC1B;MACF,CAAC,CAAC;MACFO,GAAG,EAAGlB,IAAI,IAAK;QACb,MAAMQ,EAAE,GAAG,MAAM,GAAGW,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAC9E,IAAI,CAACxB,IAAI,CAACM,IAAI,CAAC,CAACQ,GAAG,CAACN,EAAE,EAAER,IAAI,CAAC;QAC7B,OAAOU,OAAO,CAACC,OAAO,CAAC;UAAEH;QAAG,CAAC,CAAC;MAChC,CAAC;MACDC,GAAG,EAAEA,CAAA,KAAMC,OAAO,CAACC,OAAO,CAAC;QACzBc,IAAI,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC3B,IAAI,CAACM,IAAI,CAAC,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAACrB,EAAE,EAAER,IAAI,CAAC,MAAM;UAC/DQ,EAAE;UACFR,IAAI,EAAEA,CAAA,KAAMA;QACd,CAAC,CAAC;MACJ,CAAC;IACH,CAAC;EACH;AACF;;AAEA;AACA,MAAM8B,MAAM,GAAG,IAAIhC,MAAM,CAAC,CAAC;AAE3B,eAAegC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}